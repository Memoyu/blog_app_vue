# Node.js with Vue
# Build a Node.js project that uses Vue.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  tags: 
    include:
      - release-*

variables:
  containerName: blogapp
  imageName: memoyu/blogapp

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '16.x'
  displayName: 'Install Node.js'

- script: |
    cd src
    echo ==================src==================
    ls
    yarn
    yarn run build
    echo ==================base==================
    ls
  displayName: 'npm install and build'
  
- task: CopyFiles@2
  displayName: 'copy scripts to dist'
  inputs:
    Contents: |
      docker/Dockerfile
      conf/nginx.conf
    TargetFolder: 'src/dist'
    flattenFolders: true

- task: Docker@2
  displayName: 'build docker image and push'
  inputs:
    containerRegistry: 'memoyu-docker'
    repository: $(imageName)
    command: 'buildAndPush'
    Dockerfile: 'src/dist/Dockerfile'
    tags: 'latest'

- task: SSH@0
  displayName: 'run blog app container'
  inputs:
    sshEndpoint: 'HuaweiCloud'
    runOptions: 'inline'
    inline: |
      echo "================= to del container ===================="
      # 判断是否存在容器
      docker ps | grep $(containerName) &> /dev/null
      # 如果不存在，则Remove
      if [ $? -ne 0 ]
      then
          echo "$(containerName) container not exist continue.. "
      else
          echo "remove $(containerName) container"
          docker kill $(containerName)
          docker rm $(containerName)
      fi

      echo "================= to rm image ===================="
      # 判断是否存在镜像
      docker images | grep $(imageName) &> /dev/null
      # 如果不存在，不做操作
      if [ $? -ne 0 ]
      then
          echo "image does not exist , continue..."
      else
          echo "image exists !!! remove it"
          docker rmi $(imageName)
      fi

      echo "================= to pull image ===================="
      docker pull $(imageName)

      echo "================= to run container ===================="
      docker run --name $(containerName) -d -p 9002:80 $(imageName)

      echo "================= publish success ===================="
    readyTimeout: '20000'
